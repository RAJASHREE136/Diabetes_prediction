# -*- coding: utf-8 -*-
"""diabetes_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHufqPtmHtRJFSr_SgAXsyWOzuS5pa7e
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#loading dataset for diabetes prediction

diabetes_dataset=pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

# number of rows and columns in a dataset

diabetes_dataset.shape

# getting statistical measures of the data

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

#separating the data and labels
X=diabetes_dataset.drop(columns='Outcome',axis=1)
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

#Data standardization

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train test split"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)



"""training the model"""

classifier=svm.SVC(kernel='linear')

#training the svm classifier

classifier.fit(X_train,Y_train)

"""#accuracy score on training data"""

X_train_prediction=classifier.predict(X_train)

training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of training data:',training_data_accuracy)

"""Accuracy score on Testing data"""

X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of test data:',test_data_accuracy)

"""Making a predictive system"""

input_data=(11,143,94,33,146,36.6,0.254,51)

# changing the input_data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the array as we are prediciting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

#standardized the input data
std_data=scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print('Person is non-diabetic')
else:
  print("Person is diabetic")

